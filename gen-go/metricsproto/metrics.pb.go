// Code generated by protoc-gen-go. DO NOT EDIT.
// source: opencensus/proto/metrics/metrics.proto

package metricsproto // import "github.com/census-instrumentation/opencensus-proto/gen-go/metricsproto"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The kind of metric. It describes how the data is reported.
//
// A gauge is an instantaneous measurement of a value.
//
// A cumulative measurement is a value accumulated over a time interval. In
// a time series, cumulative measurements should have the same start time and
// increasing end times, until an event resets the cumulative value to zero
// and sets a new start time for the following points.
type MetricDescriptor_Type int32

const (
	// Do not use this default value.
	MetricDescriptor_UNSPECIFIED MetricDescriptor_Type = 0
	// Integer gauge.
	MetricDescriptor_GAUGE_INT64 MetricDescriptor_Type = 1
	// Floating point gauge.
	MetricDescriptor_GAUGE_DOUBLE MetricDescriptor_Type = 2
	// Integer cumulative measurement.
	MetricDescriptor_CUMULATIVE_INT64 MetricDescriptor_Type = 3
	// Floating point cumulative measurement.
	MetricDescriptor_CUMULATIVE_DOUBLE MetricDescriptor_Type = 4
	// Distribution cumulative measurement.
	MetricDescriptor_CUMULATIVE_DISTRIBUTION MetricDescriptor_Type = 5
)

var MetricDescriptor_Type_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "GAUGE_INT64",
	2: "GAUGE_DOUBLE",
	3: "CUMULATIVE_INT64",
	4: "CUMULATIVE_DOUBLE",
	5: "CUMULATIVE_DISTRIBUTION",
}
var MetricDescriptor_Type_value = map[string]int32{
	"UNSPECIFIED":             0,
	"GAUGE_INT64":             1,
	"GAUGE_DOUBLE":            2,
	"CUMULATIVE_INT64":        3,
	"CUMULATIVE_DOUBLE":       4,
	"CUMULATIVE_DISTRIBUTION": 5,
}

func (x MetricDescriptor_Type) String() string {
	return proto.EnumName(MetricDescriptor_Type_name, int32(x))
}
func (MetricDescriptor_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_metrics_9c82fee7d853168d, []int{1, 0}
}

// Defines a Metric which has one or more timeseries.
type Metric struct {
	// The definition of the Metric. For now, we send the full MetricDescriptor
	// every time in order to keep the protocol stateless, but this is one of the
	// places where we can make future changes to make the protocol more
	// efficient.
	MetricDescriptor *MetricDescriptor `protobuf:"bytes,1,opt,name=metric_descriptor,json=metricDescriptor,proto3" json:"metric_descriptor,omitempty"`
	// One or more timeseries for a single metric, where each timeseries has
	// one or more points.
	Timeseries           []*TimeSeries `protobuf:"bytes,2,rep,name=timeseries,proto3" json:"timeseries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}
func (*Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_9c82fee7d853168d, []int{0}
}
func (m *Metric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metric.Unmarshal(m, b)
}
func (m *Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metric.Marshal(b, m, deterministic)
}
func (dst *Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metric.Merge(dst, src)
}
func (m *Metric) XXX_Size() int {
	return xxx_messageInfo_Metric.Size(m)
}
func (m *Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_Metric proto.InternalMessageInfo

func (m *Metric) GetMetricDescriptor() *MetricDescriptor {
	if m != nil {
		return m.MetricDescriptor
	}
	return nil
}

func (m *Metric) GetTimeseries() []*TimeSeries {
	if m != nil {
		return m.Timeseries
	}
	return nil
}

// Defines a metric type and its schema.
type MetricDescriptor struct {
	// The metric type, including its DNS name prefix. It must be unique.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A detailed description of the metric, which can be used in documentation.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The unit in which the metric value is reported. Follows the format
	// described by http://unitsofmeasure.org/ucum.html.
	Unit string                `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	Type MetricDescriptor_Type `protobuf:"varint,4,opt,name=type,proto3,enum=opencensus.proto.metrics.MetricDescriptor_Type" json:"type,omitempty"`
	// The label keys associated with the metric descriptor.
	LabelKeys            []*LabelKey `protobuf:"bytes,5,rep,name=label_keys,json=labelKeys,proto3" json:"label_keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MetricDescriptor) Reset()         { *m = MetricDescriptor{} }
func (m *MetricDescriptor) String() string { return proto.CompactTextString(m) }
func (*MetricDescriptor) ProtoMessage()    {}
func (*MetricDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_9c82fee7d853168d, []int{1}
}
func (m *MetricDescriptor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricDescriptor.Unmarshal(m, b)
}
func (m *MetricDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricDescriptor.Marshal(b, m, deterministic)
}
func (dst *MetricDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricDescriptor.Merge(dst, src)
}
func (m *MetricDescriptor) XXX_Size() int {
	return xxx_messageInfo_MetricDescriptor.Size(m)
}
func (m *MetricDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_MetricDescriptor proto.InternalMessageInfo

func (m *MetricDescriptor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MetricDescriptor) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MetricDescriptor) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *MetricDescriptor) GetType() MetricDescriptor_Type {
	if m != nil {
		return m.Type
	}
	return MetricDescriptor_UNSPECIFIED
}

func (m *MetricDescriptor) GetLabelKeys() []*LabelKey {
	if m != nil {
		return m.LabelKeys
	}
	return nil
}

// Defines a label key associated with a metric descriptor.
type LabelKey struct {
	// The key for the label.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// A human-readable description of what this label key represents.
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelKey) Reset()         { *m = LabelKey{} }
func (m *LabelKey) String() string { return proto.CompactTextString(m) }
func (*LabelKey) ProtoMessage()    {}
func (*LabelKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_9c82fee7d853168d, []int{2}
}
func (m *LabelKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelKey.Unmarshal(m, b)
}
func (m *LabelKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelKey.Marshal(b, m, deterministic)
}
func (dst *LabelKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelKey.Merge(dst, src)
}
func (m *LabelKey) XXX_Size() int {
	return xxx_messageInfo_LabelKey.Size(m)
}
func (m *LabelKey) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelKey.DiscardUnknown(m)
}

var xxx_messageInfo_LabelKey proto.InternalMessageInfo

func (m *LabelKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *LabelKey) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// A collection of data points that describes the time-varying values
// of a metric.
type TimeSeries struct {
	// Must be present for cumulative metrics. The time when the cumulative value
	// was reset to zero. The cumulative value is over the time interval
	// [start_timestamp, timestamp]. If not specified, the backend can use the
	// previous recorded value.
	StartTimestamp *timestamp.Timestamp `protobuf:"bytes,1,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// The set of label values that uniquely identify this timeseries. Applies to
	// all points. The order of label values must match that of label keys in the
	// metric descriptor.
	LabelValues []*LabelValue `protobuf:"bytes,2,rep,name=label_values,json=labelValues,proto3" json:"label_values,omitempty"`
	// The data points of this timeseries. Point.value type MUST match the
	// MetricDescriptor.type.
	Points               []*Point `protobuf:"bytes,3,rep,name=points,proto3" json:"points,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeSeries) Reset()         { *m = TimeSeries{} }
func (m *TimeSeries) String() string { return proto.CompactTextString(m) }
func (*TimeSeries) ProtoMessage()    {}
func (*TimeSeries) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_9c82fee7d853168d, []int{3}
}
func (m *TimeSeries) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeSeries.Unmarshal(m, b)
}
func (m *TimeSeries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeSeries.Marshal(b, m, deterministic)
}
func (dst *TimeSeries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeSeries.Merge(dst, src)
}
func (m *TimeSeries) XXX_Size() int {
	return xxx_messageInfo_TimeSeries.Size(m)
}
func (m *TimeSeries) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeSeries.DiscardUnknown(m)
}

var xxx_messageInfo_TimeSeries proto.InternalMessageInfo

func (m *TimeSeries) GetStartTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.StartTimestamp
	}
	return nil
}

func (m *TimeSeries) GetLabelValues() []*LabelValue {
	if m != nil {
		return m.LabelValues
	}
	return nil
}

func (m *TimeSeries) GetPoints() []*Point {
	if m != nil {
		return m.Points
	}
	return nil
}

type LabelValue struct {
	// The value for the label.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// If false the value field is ignored and considered not set.
	// This is used to differentiate a missing label from an empty string.
	HasValue             bool     `protobuf:"varint,2,opt,name=has_value,json=hasValue,proto3" json:"has_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabelValue) Reset()         { *m = LabelValue{} }
func (m *LabelValue) String() string { return proto.CompactTextString(m) }
func (*LabelValue) ProtoMessage()    {}
func (*LabelValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_9c82fee7d853168d, []int{4}
}
func (m *LabelValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabelValue.Unmarshal(m, b)
}
func (m *LabelValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabelValue.Marshal(b, m, deterministic)
}
func (dst *LabelValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabelValue.Merge(dst, src)
}
func (m *LabelValue) XXX_Size() int {
	return xxx_messageInfo_LabelValue.Size(m)
}
func (m *LabelValue) XXX_DiscardUnknown() {
	xxx_messageInfo_LabelValue.DiscardUnknown(m)
}

var xxx_messageInfo_LabelValue proto.InternalMessageInfo

func (m *LabelValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *LabelValue) GetHasValue() bool {
	if m != nil {
		return m.HasValue
	}
	return false
}

// A timestamped measurement.
type Point struct {
	// The moment when this point was recorded. If not specified, the timestamp
	// will be decided by the backend.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The actual point value.
	//
	// Types that are valid to be assigned to Value:
	//	*Point_Int64Value
	//	*Point_DoubleValue
	//	*Point_DistributionValue
	Value                isPoint_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_9c82fee7d853168d, []int{5}
}
func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (dst *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(dst, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type isPoint_Value interface {
	isPoint_Value()
}

type Point_Int64Value struct {
	Int64Value int64 `protobuf:"varint,2,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type Point_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,3,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type Point_DistributionValue struct {
	DistributionValue *DistributionValue `protobuf:"bytes,4,opt,name=distribution_value,json=distributionValue,proto3,oneof"`
}

func (*Point_Int64Value) isPoint_Value() {}

func (*Point_DoubleValue) isPoint_Value() {}

func (*Point_DistributionValue) isPoint_Value() {}

func (m *Point) GetValue() isPoint_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Point) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*Point_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *Point) GetDoubleValue() float64 {
	if x, ok := m.GetValue().(*Point_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *Point) GetDistributionValue() *DistributionValue {
	if x, ok := m.GetValue().(*Point_DistributionValue); ok {
		return x.DistributionValue
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Point) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Point_OneofMarshaler, _Point_OneofUnmarshaler, _Point_OneofSizer, []interface{}{
		(*Point_Int64Value)(nil),
		(*Point_DoubleValue)(nil),
		(*Point_DistributionValue)(nil),
	}
}

func _Point_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Point)
	// value
	switch x := m.Value.(type) {
	case *Point_Int64Value:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Int64Value))
	case *Point_DoubleValue:
		b.EncodeVarint(3<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.DoubleValue))
	case *Point_DistributionValue:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DistributionValue); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Point.Value has unexpected type %T", x)
	}
	return nil
}

func _Point_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Point)
	switch tag {
	case 2: // value.int64_value
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Value = &Point_Int64Value{int64(x)}
		return true, err
	case 3: // value.double_value
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Value = &Point_DoubleValue{math.Float64frombits(x)}
		return true, err
	case 4: // value.distribution_value
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DistributionValue)
		err := b.DecodeMessage(msg)
		m.Value = &Point_DistributionValue{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Point_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Point)
	// value
	switch x := m.Value.(type) {
	case *Point_Int64Value:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Int64Value))
	case *Point_DoubleValue:
		n += 1 // tag and wire
		n += 8
	case *Point_DistributionValue:
		s := proto.Size(x.DistributionValue)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Distribution contains summary statistics for a population of values. It
// optionally contains a histogram representing the distribution of those
// values across a set of buckets.
type DistributionValue struct {
	// The number of values in the population. Must be non-negative. This value
	// must equal the sum of the values in bucket_counts if a histogram is
	// provided.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// The arithmetic mean of the values in the population. If count is zero
	// then this field must be zero.
	Mean float64 `protobuf:"fixed64,2,opt,name=mean,proto3" json:"mean,omitempty"`
	// The sum of squared deviations from the mean of the values in the
	// population. For values x_i this is:
	//
	//     Sum[i=1..n]((x_i - mean)^2)
	//
	// Knuth, "The Art of Computer Programming", Vol. 2, page 323, 3rd edition
	// describes Welford's method for accumulating this sum in one pass.
	//
	// If count is zero then this field must be zero.
	SumOfSquaredDeviation float64 `protobuf:"fixed64,3,opt,name=sum_of_squared_deviation,json=sumOfSquaredDeviation,proto3" json:"sum_of_squared_deviation,omitempty"`
	// A Distribution may optionally contain a histogram of the values in the
	// population. The bucket boundaries for that histogram are described by
	// bucket_bounds. This defines size(bucket_bounds) + 1 (= N)
	// buckets. The boundaries for bucket index i are:
	//
	// (-infinity, bucket_bounds[i]) for i == 0
	// [bucket_bounds[i-1], bucket_bounds[i]) for 0 < i < N-2
	// [bucket_bounds[i-1], +infinity) for i == N-1
	//
	// i.e. an underflow bucket (number 0), zero or more finite buckets (1
	// through N - 2, and an overflow bucket (N - 1), with inclusive lower
	// bounds and exclusive upper bounds.
	//
	// If bucket_bounds has no elements (zero size), then there is no
	// histogram associated with the Distribution. If bucket_bounds has only
	// one element, there are no finite buckets, and that single element is the
	// common boundary of the overflow and underflow buckets. The values must
	// be monotonically increasing.
	//
	// Don't change bucket boundaries within a timeseries if your backend
	// doesn't support this.
	BucketBounds []float64 `protobuf:"fixed64,4,rep,packed,name=bucket_bounds,json=bucketBounds,proto3" json:"bucket_bounds,omitempty"`
	// If the distribution does not have a histogram, then omit this field.
	// If there is a histogram, then the sum of the values in the Bucket counts
	// must equal the value in the count field of the distribution.
	Buckets              []*DistributionValue_Bucket `protobuf:"bytes,5,rep,name=buckets,proto3" json:"buckets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *DistributionValue) Reset()         { *m = DistributionValue{} }
func (m *DistributionValue) String() string { return proto.CompactTextString(m) }
func (*DistributionValue) ProtoMessage()    {}
func (*DistributionValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_9c82fee7d853168d, []int{6}
}
func (m *DistributionValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributionValue.Unmarshal(m, b)
}
func (m *DistributionValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributionValue.Marshal(b, m, deterministic)
}
func (dst *DistributionValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionValue.Merge(dst, src)
}
func (m *DistributionValue) XXX_Size() int {
	return xxx_messageInfo_DistributionValue.Size(m)
}
func (m *DistributionValue) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionValue.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionValue proto.InternalMessageInfo

func (m *DistributionValue) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *DistributionValue) GetMean() float64 {
	if m != nil {
		return m.Mean
	}
	return 0
}

func (m *DistributionValue) GetSumOfSquaredDeviation() float64 {
	if m != nil {
		return m.SumOfSquaredDeviation
	}
	return 0
}

func (m *DistributionValue) GetBucketBounds() []float64 {
	if m != nil {
		return m.BucketBounds
	}
	return nil
}

func (m *DistributionValue) GetBuckets() []*DistributionValue_Bucket {
	if m != nil {
		return m.Buckets
	}
	return nil
}

type DistributionValue_Bucket struct {
	// The number of values in each bucket of the histogram, as described in
	// bucket_bounds.
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// If the distribution does not have a histogram, then omit this field.
	Exemplar             *DistributionValue_Exemplar `protobuf:"bytes,2,opt,name=exemplar,proto3" json:"exemplar,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *DistributionValue_Bucket) Reset()         { *m = DistributionValue_Bucket{} }
func (m *DistributionValue_Bucket) String() string { return proto.CompactTextString(m) }
func (*DistributionValue_Bucket) ProtoMessage()    {}
func (*DistributionValue_Bucket) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_9c82fee7d853168d, []int{6, 0}
}
func (m *DistributionValue_Bucket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributionValue_Bucket.Unmarshal(m, b)
}
func (m *DistributionValue_Bucket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributionValue_Bucket.Marshal(b, m, deterministic)
}
func (dst *DistributionValue_Bucket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionValue_Bucket.Merge(dst, src)
}
func (m *DistributionValue_Bucket) XXX_Size() int {
	return xxx_messageInfo_DistributionValue_Bucket.Size(m)
}
func (m *DistributionValue_Bucket) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionValue_Bucket.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionValue_Bucket proto.InternalMessageInfo

func (m *DistributionValue_Bucket) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *DistributionValue_Bucket) GetExemplar() *DistributionValue_Exemplar {
	if m != nil {
		return m.Exemplar
	}
	return nil
}

// Exemplars are example points that may be used to annotate aggregated
// Distribution values. They are metadata that gives information about a
// particular value added to a Distribution bucket.
type DistributionValue_Exemplar struct {
	// Value of the exemplar point. It determines which bucket the exemplar
	// belongs to.
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// The observation (sampling) time of the above value.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Contextual information about the example value.
	Attachments          map[string]string `protobuf:"bytes,3,rep,name=attachments,proto3" json:"attachments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DistributionValue_Exemplar) Reset()         { *m = DistributionValue_Exemplar{} }
func (m *DistributionValue_Exemplar) String() string { return proto.CompactTextString(m) }
func (*DistributionValue_Exemplar) ProtoMessage()    {}
func (*DistributionValue_Exemplar) Descriptor() ([]byte, []int) {
	return fileDescriptor_metrics_9c82fee7d853168d, []int{6, 1}
}
func (m *DistributionValue_Exemplar) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributionValue_Exemplar.Unmarshal(m, b)
}
func (m *DistributionValue_Exemplar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributionValue_Exemplar.Marshal(b, m, deterministic)
}
func (dst *DistributionValue_Exemplar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionValue_Exemplar.Merge(dst, src)
}
func (m *DistributionValue_Exemplar) XXX_Size() int {
	return xxx_messageInfo_DistributionValue_Exemplar.Size(m)
}
func (m *DistributionValue_Exemplar) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionValue_Exemplar.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionValue_Exemplar proto.InternalMessageInfo

func (m *DistributionValue_Exemplar) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *DistributionValue_Exemplar) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *DistributionValue_Exemplar) GetAttachments() map[string]string {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func init() {
	proto.RegisterType((*Metric)(nil), "opencensus.proto.metrics.Metric")
	proto.RegisterType((*MetricDescriptor)(nil), "opencensus.proto.metrics.MetricDescriptor")
	proto.RegisterType((*LabelKey)(nil), "opencensus.proto.metrics.LabelKey")
	proto.RegisterType((*TimeSeries)(nil), "opencensus.proto.metrics.TimeSeries")
	proto.RegisterType((*LabelValue)(nil), "opencensus.proto.metrics.LabelValue")
	proto.RegisterType((*Point)(nil), "opencensus.proto.metrics.Point")
	proto.RegisterType((*DistributionValue)(nil), "opencensus.proto.metrics.DistributionValue")
	proto.RegisterType((*DistributionValue_Bucket)(nil), "opencensus.proto.metrics.DistributionValue.Bucket")
	proto.RegisterType((*DistributionValue_Exemplar)(nil), "opencensus.proto.metrics.DistributionValue.Exemplar")
	proto.RegisterMapType((map[string]string)(nil), "opencensus.proto.metrics.DistributionValue.Exemplar.AttachmentsEntry")
	proto.RegisterEnum("opencensus.proto.metrics.MetricDescriptor_Type", MetricDescriptor_Type_name, MetricDescriptor_Type_value)
}

func init() {
	proto.RegisterFile("opencensus/proto/metrics/metrics.proto", fileDescriptor_metrics_9c82fee7d853168d)
}

var fileDescriptor_metrics_9c82fee7d853168d = []byte{
	// 823 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xdb, 0x8e, 0xda, 0x46,
	0x18, 0x5e, 0x1f, 0x20, 0xf0, 0x9b, 0x26, 0x66, 0x94, 0xa8, 0x16, 0x7b, 0x11, 0xea, 0x54, 0x15,
	0x6a, 0xb5, 0x46, 0xa2, 0xab, 0x24, 0xea, 0x45, 0x2a, 0x4e, 0xd9, 0x45, 0x25, 0xbb, 0x68, 0x80,
	0x54, 0xaa, 0x2a, 0x59, 0x06, 0x66, 0xc1, 0x5a, 0x9f, 0xea, 0x19, 0x47, 0xe5, 0xba, 0x7d, 0x97,
	0x3e, 0x50, 0x9f, 0xa0, 0xd7, 0xbd, 0xe9, 0x23, 0x54, 0x9e, 0xb1, 0xc1, 0xa1, 0x45, 0x5d, 0x7a,
	0xe5, 0x99, 0x6f, 0xbe, 0xef, 0x3f, 0xf9, 0x1b, 0x1b, 0xbe, 0x08, 0x23, 0x12, 0x2c, 0x49, 0x40,
	0x13, 0xda, 0x8e, 0xe2, 0x90, 0x85, 0x6d, 0x9f, 0xb0, 0xd8, 0x5d, 0xd2, 0xfc, 0x69, 0x71, 0x14,
	0x19, 0x7b, 0x9e, 0x40, 0xac, 0xec, 0xbc, 0xf1, 0x7c, 0x1d, 0x86, 0x6b, 0x8f, 0x08, 0xf5, 0x22,
	0xb9, 0x6b, 0x33, 0xd7, 0x27, 0x94, 0x39, 0x7e, 0x24, 0x88, 0xe6, 0x6f, 0x12, 0x94, 0xdf, 0x71,
	0x32, 0xfa, 0x1e, 0xea, 0x42, 0x66, 0xaf, 0x08, 0x5d, 0xc6, 0x6e, 0xc4, 0xc2, 0xd8, 0x90, 0x9a,
	0x52, 0x4b, 0xeb, 0x7c, 0x69, 0x1d, 0xcb, 0x60, 0x09, 0xf1, 0x60, 0xa7, 0xc0, 0xba, 0x7f, 0x80,
	0xa0, 0x01, 0x00, 0x4f, 0x4b, 0x62, 0x97, 0x50, 0x43, 0x6e, 0x2a, 0x2d, 0xad, 0xf3, 0xf9, 0xf1,
	0x88, 0x33, 0xd7, 0x27, 0x53, 0xce, 0xc5, 0x05, 0x9d, 0xf9, 0xa7, 0x0c, 0xfa, 0x61, 0x32, 0x84,
	0x40, 0x0d, 0x1c, 0x9f, 0xf0, 0x32, 0xab, 0x98, 0xaf, 0x51, 0x13, 0xb4, 0xbc, 0x01, 0x37, 0x0c,
	0x0c, 0x99, 0x1f, 0x15, 0xa1, 0x54, 0x95, 0x04, 0x2e, 0x33, 0x14, 0xa1, 0x4a, 0xd7, 0xa8, 0x0f,
	0x2a, 0xdb, 0x46, 0xc4, 0x50, 0x9b, 0x52, 0xeb, 0x71, 0xa7, 0xfd, 0xf0, 0x86, 0xad, 0xd9, 0x36,
	0x22, 0x98, 0x8b, 0x51, 0x17, 0xc0, 0x73, 0x16, 0xc4, 0xb3, 0xef, 0xc9, 0x96, 0x1a, 0x25, 0xde,
	0xa9, 0x79, 0x3c, 0xd4, 0x38, 0xe5, 0x7e, 0x47, 0xb6, 0xb8, 0xea, 0x65, 0x2b, 0x6a, 0xfe, 0x2a,
	0x81, 0x9a, 0x46, 0x44, 0x4f, 0x40, 0x9b, 0xdf, 0x4c, 0x27, 0xc3, 0xfe, 0xe8, 0xed, 0x68, 0x38,
	0xd0, 0xcf, 0x52, 0xe0, 0xaa, 0x3b, 0xbf, 0x1a, 0xda, 0xa3, 0x9b, 0xd9, 0xcb, 0x4b, 0x5d, 0x42,
	0x3a, 0xd4, 0x04, 0x30, 0xb8, 0x9d, 0xf7, 0xc6, 0x43, 0x5d, 0x46, 0x4f, 0x41, 0xef, 0xcf, 0xdf,
	0xcd, 0xc7, 0xdd, 0xd9, 0xe8, 0x7d, 0xce, 0x53, 0xd0, 0x33, 0xa8, 0x17, 0xd0, 0x8c, 0xac, 0xa2,
	0x73, 0xf8, 0xb4, 0x08, 0x8f, 0xa6, 0x33, 0x3c, 0xea, 0xcd, 0x67, 0xa3, 0xdb, 0x1b, 0xbd, 0x64,
	0xbe, 0x81, 0x4a, 0x5e, 0x1d, 0xd2, 0x41, 0xb9, 0x27, 0xdb, 0x6c, 0xc6, 0xe9, 0xf2, 0xbf, 0x47,
	0x6c, 0xfe, 0x2e, 0x01, 0xec, 0x5f, 0x24, 0xea, 0xc3, 0x13, 0xca, 0x9c, 0x98, 0xd9, 0x3b, 0xff,
	0x65, 0xce, 0x6a, 0x58, 0xc2, 0xa1, 0x56, 0xee, 0x50, 0xfe, 0xfa, 0x39, 0x03, 0x3f, 0xe6, 0x92,
	0xdd, 0x1e, 0x5d, 0x41, 0x4d, 0x4c, 0xf7, 0x83, 0xe3, 0x25, 0x0f, 0x71, 0x12, 0xef, 0xe0, 0x7d,
	0x4a, 0xc6, 0x9a, 0xb7, 0x5b, 0x53, 0xf4, 0x0a, 0xca, 0x51, 0xe8, 0x06, 0x8c, 0x1a, 0x0a, 0x0f,
	0xf1, 0xfc, 0x78, 0x88, 0x49, 0xca, 0xc3, 0x19, 0xdd, 0xfc, 0x16, 0x60, 0x1f, 0x13, 0x3d, 0x85,
	0x12, 0xaf, 0x24, 0x9b, 0x8c, 0xd8, 0xa0, 0x73, 0xa8, 0x6e, 0x1c, 0x2a, 0x6a, 0xe4, 0x93, 0xa9,
	0xe0, 0xca, 0xc6, 0xa1, 0x5c, 0x62, 0xfe, 0x25, 0x41, 0x89, 0x87, 0x44, 0xaf, 0xa1, 0x7a, 0xca,
	0x2c, 0xf6, 0x64, 0xf4, 0x19, 0x68, 0x6e, 0xc0, 0x5e, 0x5e, 0x16, 0x52, 0x28, 0xd7, 0x67, 0x18,
	0x38, 0x28, 0x2a, 0x7b, 0x01, 0xb5, 0x55, 0x98, 0x2c, 0x3c, 0x92, 0x71, 0x52, 0xa3, 0x4b, 0xd7,
	0x67, 0x58, 0x13, 0xa8, 0x20, 0xfd, 0x08, 0x68, 0xe5, 0x52, 0x16, 0xbb, 0x8b, 0x24, 0x7d, 0x65,
	0x19, 0x55, 0xe5, 0xa5, 0x7c, 0x75, 0x7c, 0x22, 0x83, 0x82, 0x86, 0x07, 0xba, 0x3e, 0xc3, 0xf5,
	0xd5, 0x21, 0xd8, 0x7b, 0x94, 0x0d, 0xc7, 0xfc, 0x43, 0x85, 0xfa, 0x3f, 0x34, 0xe9, 0xec, 0x96,
	0x61, 0x12, 0x30, 0xde, 0xba, 0x82, 0xc5, 0x26, 0xbd, 0x98, 0x3e, 0x71, 0x84, 0xa1, 0x24, 0xcc,
	0xd7, 0xe8, 0x15, 0x18, 0x34, 0xf1, 0xed, 0xf0, 0xce, 0xa6, 0x3f, 0x25, 0x4e, 0x4c, 0x56, 0xf6,
	0x8a, 0x7c, 0x70, 0x1d, 0x6e, 0x3c, 0xde, 0x17, 0x7e, 0x46, 0x13, 0xff, 0xf6, 0x6e, 0x2a, 0x4e,
	0x07, 0xf9, 0x21, 0x7a, 0x01, 0x9f, 0x2c, 0x92, 0xe5, 0x3d, 0x61, 0xf6, 0x22, 0x4c, 0x82, 0x15,
	0x35, 0xd4, 0xa6, 0xd2, 0x92, 0x70, 0x4d, 0x80, 0x3d, 0x8e, 0xa1, 0x31, 0x3c, 0x12, 0xfb, 0xfc,
	0xba, 0x76, 0x4e, 0xe8, 0xdc, 0xea, 0x71, 0x29, 0xce, 0x43, 0x34, 0x22, 0x28, 0x0b, 0xe8, 0x48,
	0x7f, 0x13, 0xa8, 0x90, 0x9f, 0x89, 0x1f, 0x79, 0x4e, 0xcc, 0x7b, 0xd4, 0x3a, 0x97, 0xa7, 0xa4,
	0x1b, 0x66, 0x5a, 0xbc, 0x8b, 0xd2, 0xf8, 0x45, 0x86, 0x4a, 0x0e, 0x7f, 0x6c, 0x48, 0x29, 0x37,
	0xe4, 0x47, 0x4e, 0x93, 0x4f, 0x71, 0xda, 0x1a, 0x34, 0x87, 0x31, 0x67, 0xb9, 0xf1, 0xc9, 0xfe,
	0xb2, 0x0c, 0xff, 0x4f, 0xc5, 0x56, 0x77, 0x1f, 0x67, 0x18, 0xb0, 0x78, 0x8b, 0x8b, 0x91, 0x1b,
	0x6f, 0x40, 0x3f, 0x24, 0xfc, 0xcb, 0x57, 0x67, 0xd7, 0x9e, 0x5c, 0xb8, 0x6f, 0xdf, 0xc8, 0xaf,
	0xa5, 0x5e, 0x02, 0xe7, 0x6e, 0x78, 0xb4, 0xae, 0x5e, 0x4d, 0x7c, 0xb3, 0xe9, 0x24, 0x45, 0x27,
	0xd2, 0x0f, 0x6f, 0xd7, 0x2e, 0xdb, 0x24, 0x0b, 0x6b, 0x19, 0xfa, 0x6d, 0x21, 0xb8, 0x70, 0x03,
	0xca, 0xe2, 0x24, 0x4d, 0xcf, 0xcd, 0xd3, 0xde, 0xc7, 0xba, 0x10, 0x7f, 0xde, 0x35, 0x09, 0x2e,
	0xd6, 0xbb, 0x1f, 0xb0, 0x98, 0x5b, 0x99, 0x3f, 0xbe, 0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xaf,
	0x3f, 0x30, 0xb3, 0xa8, 0x07, 0x00, 0x00,
}
