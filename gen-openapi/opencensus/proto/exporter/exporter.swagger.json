{
  "swagger": "2.0",
  "info": {
    "title": "opencensus/proto/exporter/exporter.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/export/metrics": {
      "post": {
        "operationId": "ExportMetrics",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "$ref": "#/definitions/exporterExportMetricsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": " (streaming inputs)",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/exporterExportMetricsRequest"
            }
          }
        ],
        "tags": [
          "Export"
        ]
      }
    },
    "/v1/export/spans": {
      "post": {
        "operationId": "ExportSpan",
        "responses": {
          "200": {
            "description": "(streaming responses)",
            "schema": {
              "$ref": "#/definitions/exporterExportSpanResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": " (streaming inputs)",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/exporterExportSpanRequest"
            }
          }
        ],
        "tags": [
          "Export"
        ]
      }
    }
  },
  "definitions": {
    "DistributionValueBucket": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64",
          "description": "The number of values in each bucket of the histogram, as described in\nbucket_bounds."
        },
        "exemplar": {
          "$ref": "#/definitions/DistributionValueExemplar",
          "description": "If the distribution does not have a histogram, then omit this field."
        }
      }
    },
    "DistributionValueExemplar": {
      "type": "object",
      "properties": {
        "value": {
          "type": "number",
          "format": "double",
          "description": "Value of the exemplar point. It determines which bucket the exemplar\nbelongs to."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The observation (sampling) time of the above value."
        },
        "attachments": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Contextual information about the example value."
        }
      },
      "description": "Exemplars are example points that may be used to annotate aggregated\nDistribution values. They are metadata that gives information about a\nparticular value added to a Distribution bucket."
    },
    "SpanAttributes": {
      "type": "object",
      "properties": {
        "attribute_map": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/traceAttributeValue"
          },
          "description": "\"/instance_id\": \"my-instance\"\n    \"/http/user_agent\": \"\"\n    \"/http/server_latency\": 300\n    \"abc.com/myattribute\": true",
          "title": "The set of attributes. The value can be a string, an integer, or the\nBoolean values `true` and `false`. For example:"
        },
        "dropped_attributes_count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of attributes that were discarded. Attributes can be discarded\nbecause their keys are too long or because there are too many attributes.\nIf this value is 0, then no attributes were dropped."
        }
      },
      "description": "A set of attributes, each with a key and a value."
    },
    "SpanLink": {
      "type": "object",
      "properties": {
        "trace_id": {
          "type": "string",
          "format": "byte",
          "description": "A unique identifier for a trace. All spans from the same trace share\nthe same `trace_id`. The ID is a 16-byte array."
        },
        "span_id": {
          "type": "string",
          "format": "byte",
          "description": "A unique identifier for a span within a trace, assigned when the span\nis created. The ID is an 8-byte array."
        },
        "type": {
          "$ref": "#/definitions/SpanLinkType",
          "description": "The relationship of the current span relative to the linked span."
        },
        "attributes": {
          "$ref": "#/definitions/SpanAttributes",
          "description": "A set of attributes on the link."
        }
      },
      "description": "A pointer from the current span to another span in the same trace or in a\ndifferent trace. For example, this can be used in batching operations,\nwhere a single batch handler processes multiple requests from different\ntraces or when the handler receives a request from a different project."
    },
    "SpanLinkType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "CHILD_LINKED_SPAN",
        "PARENT_LINKED_SPAN"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "The relationship of the current span relative to the linked span: child,\nparent, or unspecified.\n\n - TYPE_UNSPECIFIED: The relationship of the two spans is unknown, or known but other\nthan parent-child.\n - CHILD_LINKED_SPAN: The linked span is a child of the current span.\n - PARENT_LINKED_SPAN: The linked span is a parent of the current span."
    },
    "SpanLinks": {
      "type": "object",
      "properties": {
        "link": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpanLink"
          },
          "description": "A collection of links."
        },
        "dropped_links_count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of dropped links after the maximum size was enforced. If\nthis value is 0, then no links were dropped."
        }
      },
      "description": "A collection of links, which are references from this span to a span\nin the same or different trace."
    },
    "SpanSpanKind": {
      "type": "string",
      "enum": [
        "SPAN_KIND_UNSPECIFIED",
        "SERVER",
        "CLIENT"
      ],
      "default": "SPAN_KIND_UNSPECIFIED",
      "description": "Type of span. Can be used to specify additional relationships between spans\nin addition to a parent/child relationship.\n\n - SPAN_KIND_UNSPECIFIED: Unspecified.\n - SERVER: Indicates that the span covers server-side handling of an RPC or other\nremote network request.\n - CLIENT: Indicates that the span covers the client-side wrapper around an RPC or\nother remote request."
    },
    "SpanTimeEvent": {
      "type": "object",
      "properties": {
        "time": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occurred."
        },
        "annotation": {
          "$ref": "#/definitions/TimeEventAnnotation",
          "description": "A text annotation with a set of attributes."
        },
        "message_event": {
          "$ref": "#/definitions/TimeEventMessageEvent",
          "description": "An event describing a message sent/received between Spans."
        }
      },
      "description": "A time-stamped annotation or message event in the Span."
    },
    "SpanTimeEvents": {
      "type": "object",
      "properties": {
        "time_event": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpanTimeEvent"
          },
          "description": "A collection of `TimeEvent`s."
        },
        "dropped_annotations_count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of dropped annotations in all the included time events.\nIf the value is 0, then no annotations were dropped."
        },
        "dropped_message_events_count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of dropped message events in all the included time events.\nIf the value is 0, then no message events were dropped."
        }
      },
      "description": "A collection of `TimeEvent`s. A `TimeEvent` is a time-stamped annotation\non the span, consisting of either user-supplied key-value pairs, or\ndetails of a message sent/received between Spans."
    },
    "StackTraceStackFrame": {
      "type": "object",
      "properties": {
        "function_name": {
          "$ref": "#/definitions/traceTruncatableString",
          "description": "The fully-qualified name that uniquely identifies the function or\nmethod that is active in this frame."
        },
        "original_function_name": {
          "$ref": "#/definitions/traceTruncatableString",
          "description": "An un-mangled function name, if `function_name` is\n[mangled](http://www.avabodh.com/cxxin/namemangling.html). The name can\nbe fully qualified."
        },
        "file_name": {
          "$ref": "#/definitions/traceTruncatableString",
          "description": "The name of the source file where the function call appears."
        },
        "line_number": {
          "type": "string",
          "format": "int64",
          "description": "The line number in `file_name` where the function call appears."
        },
        "column_number": {
          "type": "string",
          "format": "int64",
          "description": "The column number where the function call appears, if available.\nThis is important in JavaScript because of its anonymous functions."
        },
        "load_module": {
          "$ref": "#/definitions/traceModule",
          "description": "The binary module from where the code was loaded."
        },
        "source_version": {
          "$ref": "#/definitions/traceTruncatableString",
          "description": "The version of the deployed source code."
        }
      },
      "description": "A single stack frame in a stack trace."
    },
    "StackTraceStackFrames": {
      "type": "object",
      "properties": {
        "frame": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/StackTraceStackFrame"
          },
          "description": "Stack frames in this call stack."
        },
        "dropped_frames_count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of stack frames that were dropped because there\nwere too many stack frames.\nIf this value is 0, then no stack frames were dropped."
        }
      },
      "description": "A collection of stack frames, which can be truncated."
    },
    "TimeEventAnnotation": {
      "type": "object",
      "properties": {
        "description": {
          "$ref": "#/definitions/traceTruncatableString",
          "description": "A user-supplied message describing the event."
        },
        "attributes": {
          "$ref": "#/definitions/SpanAttributes",
          "description": "A set of attributes on the annotation."
        }
      },
      "description": "A text annotation with a set of attributes."
    },
    "TimeEventMessageEvent": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/TimeEventMessageEventType",
          "description": "The type of MessageEvent. Indicates whether the message was sent or\nreceived."
        },
        "id": {
          "type": "string",
          "format": "uint64",
          "description": "An identifier for the MessageEvent's message that can be used to match\nSENT and RECEIVED MessageEvents. For example, this field could\nrepresent a sequence ID for a streaming RPC. It is recommended to be\nunique within a Span."
        },
        "uncompressed_size": {
          "type": "string",
          "format": "uint64",
          "description": "The number of uncompressed bytes sent or received."
        },
        "compressed_size": {
          "type": "string",
          "format": "uint64",
          "description": "The number of compressed bytes sent or received. If zero, assumed to\nbe the same size as uncompressed."
        }
      },
      "description": "An event describing a message sent/received between Spans."
    },
    "TimeEventMessageEventType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "SENT",
        "RECEIVED"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "Indicates whether the message was sent or received.\n\n - TYPE_UNSPECIFIED: Unknown event type.\n - SENT: Indicates a sent message.\n - RECEIVED: Indicates a received message."
    },
    "exporterExportMetricsRequest": {
      "type": "object",
      "properties": {
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/metricsMetric"
          }
        }
      }
    },
    "exporterExportMetricsResponse": {
      "type": "object"
    },
    "exporterExportSpanRequest": {
      "type": "object",
      "properties": {
        "spans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/traceSpan"
          }
        }
      }
    },
    "exporterExportSpanResponse": {
      "type": "object"
    },
    "metricsDistributionValue": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64",
          "description": "The number of values in the population. Must be non-negative. This value\nmust equal the sum of the values in bucket_counts if a histogram is\nprovided."
        },
        "mean": {
          "type": "number",
          "format": "double",
          "description": "The arithmetic mean of the values in the population. If count is zero\nthen this field must be zero."
        },
        "sum_of_squared_deviation": {
          "type": "number",
          "format": "double",
          "description": "Sum[i=1..n]((x_i - mean)^2)\n\nKnuth, \"The Art of Computer Programming\", Vol. 2, page 323, 3rd edition\ndescribes Welford's method for accumulating this sum in one pass.\n\nIf count is zero then this field must be zero.",
          "title": "The sum of squared deviations from the mean of the values in the\npopulation. For values x_i this is:"
        },
        "bucket_bounds": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          },
          "description": "(-infinity, bucket_bounds[i]) for i == 0\n[bucket_bounds[i-1], bucket_bounds[i]) for 0 \u003c i \u003c N-2\n[bucket_bounds[i-1], +infinity) for i == N-1\n\ni.e. an underflow bucket (number 0), zero or more finite buckets (1\nthrough N - 2, and an overflow bucket (N - 1), with inclusive lower\nbounds and exclusive upper bounds.\n\nIf bucket_bounds has no elements (zero size), then there is no\nhistogram associated with the Distribution. If bucket_bounds has only\none element, there are no finite buckets, and that single element is the\ncommon boundary of the overflow and underflow buckets. The values must\nbe monotonically increasing.\n\nDon't change bucket boundaries within a timeseries if your backend\ndoesn't support this.",
          "title": "A Distribution may optionally contain a histogram of the values in the\npopulation. The bucket boundaries for that histogram are described by\nbucket_bounds. This defines size(bucket_bounds) + 1 (= N)\nbuckets. The boundaries for bucket index i are:"
        },
        "buckets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DistributionValueBucket"
          },
          "description": "If the distribution does not have a histogram, then omit this field.\nIf there is a histogram, then the sum of the values in the Bucket counts\nmust equal the value in the count field of the distribution."
        }
      },
      "description": "Distribution contains summary statistics for a population of values. It\noptionally contains a histogram representing the distribution of those\nvalues across a set of buckets."
    },
    "metricsLabelKey": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The key for the label."
        },
        "description": {
          "type": "string",
          "description": "A human-readable description of what this label key represents."
        }
      },
      "description": "Defines a label key associated with a metric descriptor."
    },
    "metricsLabelValue": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The value for the label."
        },
        "has_value": {
          "type": "boolean",
          "format": "boolean",
          "description": "If false the value field is ignored and considered not set.\nThis is used to differentiate a missing label from an empty string."
        }
      }
    },
    "metricsMetric": {
      "type": "object",
      "properties": {
        "metric_descriptor": {
          "$ref": "#/definitions/metricsMetricDescriptor",
          "description": "The definition of the Metric. For now, we send the full MetricDescriptor\nevery time in order to keep the protocol stateless, but this is one of the\nplaces where we can make future changes to make the protocol more\nefficient."
        },
        "timeseries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/metricsTimeSeries"
          },
          "description": "One or more timeseries for a single metric, where each timeseries has\none or more points."
        }
      },
      "description": "Defines a Metric which has one or more timeseries."
    },
    "metricsMetricDescriptor": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The metric type, including its DNS name prefix. It must be unique."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the metric, which can be used in documentation."
        },
        "unit": {
          "type": "string",
          "description": "The unit in which the metric value is reported. Follows the format\ndescribed by http://unitsofmeasure.org/ucum.html."
        },
        "type": {
          "$ref": "#/definitions/metricsMetricDescriptorType"
        },
        "label_keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/metricsLabelKey"
          },
          "description": "The label keys associated with the metric descriptor."
        }
      },
      "description": "Defines a metric type and its schema."
    },
    "metricsMetricDescriptorType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "GAUGE_INT64",
        "GAUGE_DOUBLE",
        "CUMULATIVE_INT64",
        "CUMULATIVE_DOUBLE",
        "CUMULATIVE_DISTRIBUTION"
      ],
      "default": "UNSPECIFIED",
      "description": "The kind of metric. It describes how the data is reported.\n\nA gauge is an instantaneous measurement of a value.\n\nA cumulative measurement is a value accumulated over a time interval. In\na time series, cumulative measurements should have the same start time and\nincreasing end times, until an event resets the cumulative value to zero\nand sets a new start time for the following points.\n\n - UNSPECIFIED: Do not use this default value.\n - GAUGE_INT64: Integer gauge.\n - GAUGE_DOUBLE: Floating point gauge.\n - CUMULATIVE_INT64: Integer cumulative measurement.\n - CUMULATIVE_DOUBLE: Floating point cumulative measurement.\n - CUMULATIVE_DISTRIBUTION: Distribution cumulative measurement."
    },
    "metricsPoint": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The moment when this point was recorded. If not specified, the timestamp\nwill be decided by the backend."
        },
        "int64_value": {
          "type": "string",
          "format": "int64",
          "description": "A 64-bit integer."
        },
        "double_value": {
          "type": "number",
          "format": "double",
          "description": "A 64-bit double-precision floating-point number."
        },
        "distribution_value": {
          "$ref": "#/definitions/metricsDistributionValue",
          "description": "A distribution value."
        }
      },
      "description": "A timestamped measurement."
    },
    "metricsTimeSeries": {
      "type": "object",
      "properties": {
        "start_timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Must be present for cumulative metrics. The time when the cumulative value\nwas reset to zero. The cumulative value is over the time interval\n[start_timestamp, timestamp]. If not specified, the backend can use the\nprevious recorded value."
        },
        "label_values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/metricsLabelValue"
          },
          "description": "The set of label values that uniquely identify this timeseries. Applies to\nall points. The order of label values must match that of label keys in the\nmetric descriptor."
        },
        "points": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/metricsPoint"
          },
          "description": "The data points of this timeseries. Point.value type MUST match the\nMetricDescriptor.type."
        }
      },
      "description": "A collection of data points that describes the time-varying values\nof a metric."
    },
    "traceAttributeValue": {
      "type": "object",
      "properties": {
        "string_value": {
          "$ref": "#/definitions/traceTruncatableString",
          "description": "A string up to 256 bytes long."
        },
        "int_value": {
          "type": "string",
          "format": "int64",
          "description": "A 64-bit signed integer."
        },
        "bool_value": {
          "type": "boolean",
          "format": "boolean",
          "description": "A Boolean value represented by `true` or `false`."
        }
      },
      "description": "The value of an Attribute."
    },
    "traceModule": {
      "type": "object",
      "properties": {
        "module": {
          "$ref": "#/definitions/traceTruncatableString",
          "description": "TODO: document the meaning of this field.\nFor example: main binary, kernel modules, and dynamic libraries\nsuch as libc.so, sharedlib.so."
        },
        "build_id": {
          "$ref": "#/definitions/traceTruncatableString",
          "description": "A unique identifier for the module, usually a hash of its\ncontents."
        }
      },
      "description": "A description of a binary module."
    },
    "traceSpan": {
      "type": "object",
      "properties": {
        "trace_id": {
          "type": "string",
          "format": "byte",
          "description": "A unique identifier for a trace. All spans from the same trace share\nthe same `trace_id`. The ID is a 16-byte array.\n\nThis field is required."
        },
        "span_id": {
          "type": "string",
          "format": "byte",
          "description": "A unique identifier for a span within a trace, assigned when the span\nis created. The ID is an 8-byte array.\n\nThis field is required."
        },
        "tracestate": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The `tracestate` field conveys information about request position in multiple distributed\ntracing graphs.\n\nThere can be a maximum of 32 members in the map.\n\nThe key must begin with a lowercase letter, and can only contain lowercase letters 'a'-'z',\ndigits '0'-'9', underscores '_', dashes '-', asterisks '*', and forward slashes '/'. For\nmulti-tenant vendors scenarios '@' sign can be used to prefix vendor name. The maximum length\nfor the key is 256 characters.\n\nThe value is opaque string up to 256 characters printable ASCII RFC0020 characters (i.e., the\nrange 0x20 to 0x7E) except ',' and '='. Note that this also excludes tabs, newlines, carriage\nreturns, etc.\n\nSee the https://github.com/w3c/distributed-tracing for more details about this field."
        },
        "parent_span_id": {
          "type": "string",
          "format": "byte",
          "description": "The `span_id` of this span's parent span. If this is a root span, then this\nfield must be empty. The ID is an 8-byte array."
        },
        "name": {
          "$ref": "#/definitions/traceTruncatableString",
          "description": "A description of the span's operation.\n\nFor example, the name can be a qualified method name or a file name\nand a line number where the operation is called. A best practice is to use\nthe same display name at the same call point in an application.\nThis makes it easier to correlate spans in different traces.\n\nThis field is required."
        },
        "kind": {
          "$ref": "#/definitions/SpanSpanKind",
          "description": "Distinguishes between spans generated in a particular context. For example,\ntwo spans with the same name may be distinguished using `CLIENT`\nand `SERVER` to identify queueing latency associated with the span."
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "The start time of the span. On the client side, this is the time kept by\nthe local machine where the span execution starts. On the server side, this\nis the time when the server's application handler starts running."
        },
        "end_time": {
          "type": "string",
          "format": "date-time",
          "description": "The end time of the span. On the client side, this is the time kept by\nthe local machine where the span execution ends. On the server side, this\nis the time when the server application handler stops running."
        },
        "attributes": {
          "$ref": "#/definitions/SpanAttributes",
          "description": "A set of attributes on the span."
        },
        "stack_trace": {
          "$ref": "#/definitions/traceStackTrace",
          "description": "A stack trace captured at the start of the span."
        },
        "time_events": {
          "$ref": "#/definitions/SpanTimeEvents",
          "description": "The included time events."
        },
        "links": {
          "$ref": "#/definitions/SpanLinks",
          "description": "The inclued links."
        },
        "status": {
          "$ref": "#/definitions/traceStatus",
          "description": "An optional final status for this span."
        },
        "same_process_as_parent_span": {
          "type": "boolean",
          "format": "boolean",
          "description": "A highly recommended but not required flag that identifies when a trace\ncrosses a process boundary. True when the parent_span belongs to the\nsame process as the current span."
        },
        "child_span_count": {
          "type": "integer",
          "format": "int64",
          "description": "An optional number of child spans that were generated while this span\nwas active. If set, allows an implementation to detect missing child spans."
        }
      },
      "description": "A span represents a single operation within a trace. Spans can be\nnested to form a trace tree. Often, a trace contains a root span\nthat describes the end-to-end latency, and one or more subspans for\nits sub-operations. A trace can also contain multiple root spans,\nor none at all. Spans do not need to be contiguous - there may be\ngaps or overlaps between spans in a trace.\n\nThe next id is 16.\nTODO(bdrutu): Add an example."
    },
    "traceStackTrace": {
      "type": "object",
      "properties": {
        "stack_frames": {
          "$ref": "#/definitions/StackTraceStackFrames",
          "description": "Stack frames in this stack trace."
        },
        "stack_trace_hash_id": {
          "type": "string",
          "format": "uint64",
          "description": "The hash ID is used to conserve network bandwidth for duplicate\nstack traces within a single trace.\n\nOften multiple spans will have identical stack traces.\nThe first occurrence of a stack trace should contain both\n`stack_frames` and a value in `stack_trace_hash_id`.\n\nSubsequent spans within the same request can refer\nto that stack trace by setting only `stack_trace_hash_id`.\n\nTODO: describe how to deal with the case where stack_trace_hash_id is\nzero because it was not set."
        }
      },
      "description": "The call stack which originated this span."
    },
    "traceStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "description": "The status code."
        },
        "message": {
          "type": "string",
          "description": "A developer-facing error message, which should be in English."
        }
      },
      "description": "The `Status` type defines a logical error model that is suitable for different\nprogramming environments, including REST APIs and RPC APIs. This proto's fields\nare a subset of those of\n[google.rpc.Status](https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto),\nwhich is used by [gRPC](https://github.com/grpc)."
    },
    "traceTruncatableString": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "The shortened string. For example, if the original string was 500 bytes long and\nthe limit of the string was 128 bytes, then this value contains the first 128\nbytes of the 500-byte string. Note that truncation always happens on a\ncharacter boundary, to ensure that a truncated string is still valid UTF-8.\nBecause it may contain multi-byte characters, the size of the truncated string\nmay be less than the truncation limit."
        },
        "truncated_byte_count": {
          "type": "integer",
          "format": "int32",
          "description": "The number of bytes removed from the original string. If this\nvalue is 0, then the string was not shortened."
        }
      },
      "description": "A string that might be shortened to a specified length."
    }
  }
}
